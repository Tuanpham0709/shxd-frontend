import React, { useState, useRef, useEffect, useContext } from 'react';
import Toolbar from './Toolbar';
import { Button } from 'antd';
import styles from './style.module.less';
import { AppContext } from '../../../contexts/AppContext';
import PdfRender from './PdfRender';
import pdfjsLib from 'pdfjs-dist/build/pdf';
import pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';
pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;
// import PdfRenderGridView from './PdfRenderGridView'
export enum PdfViewType {
  gridDisplay = "gridDisplay",
  singleDisplay = "singleDisplay"
}
interface NodeShortened {
  key: string;
  uri: string;
}
interface IProps {
  nodesShortened: NodeShortened[];
}
const useDisplayPdfType = () => {
  const [displayPdfType, setDisplayPdfType] = useState(PdfViewType.gridDisplay);
  return {
    displayPdfType, setDisplayPdfType
  }
}
const checkWidthContainer = () => {
  const [widthContainer, setWidthContainer] = useState(800);
  return {
    widthContainer, setWidthContainer
  }
}
interface ResolveType {
  pdf: any;
  arrPages: any[]
}const initPdfState: ResolveType = {
  pdf: null,
  arrPages: []
};
const usePdf = () => {
  const [pdfState, setPdfState] = useState(initPdfState);
  return {
    pdfState, setPdfState
  }
}
const getDocument = (url: string): Promise<ResolveType> => {
  return new Promise((resolve, reject) => {
    pdfjsLib
      .getDocument(url).promise
      .then(async pdf => {
        const arrPages = Array.from(Array(pdf.numPages).keys());
        const res: ResolveType = {
          pdf,
          arrPages
        }
        resolve(res)
      })
      .catch(err => reject(err));
  })

};
const ShowProject: React.FC<IProps> = ({ nodesShortened }) => {
  let refPdfContainer = useRef(null);
  const { widthContainer, setWidthContainer } = checkWidthContainer();
  const { nodeInfo } = useContext(AppContext);
  const { pdfState, setPdfState } = usePdf();
  useEffect(() => {
    if (refPdfContainer.current) {
      setWidthContainer(refPdfContainer.current.offsetWidth)
    }
  }, [widthContainer]);
  useEffect(() => {
    if (nodeInfo) {
      getPdfFromUri();
    }

  }, [nodeInfo])
  const getPdfFromUri = async () => {
    const pdfResolve = await getDocument(nodeInfo.nodeMedia.uri);
    setPdfState(pdfResolve)
  }
  const { displayPdfType, setDisplayPdfType } = useDisplayPdfType();
  const onSetDisplayPdfGrid = () => {
    setDisplayPdfType(PdfViewType.gridDisplay);
  }
  const onSetDisplayPdfSingle = () => {
    setDisplayPdfType(PdfViewType.singleDisplay);
  }
  // const uriSingleRender = (nodeInfo && nodeInfo.nodeMedia) ? nodeInfo.nodeMedia.uri : null;
  const renderSingleView = (nodeInfo: any, widthContainer: number) => {
    if (pdfState && nodeInfo) {
      console.log(" pdfState", pdfState);
      return <PdfRender pdf={pdfState.pdf} widthContainer={widthContainer} nodeKey={nodeInfo.key} arrPages={pdfState.arrPages} pdfViewType={displayPdfType} />
    }
    return <div />


  }
  const renderListPdf = () => {

    return nodesShortened.map((item, index) => {
      if (!item.uri) {
        return null;
      }
      return <div></div>
      // return <PdfRenderGridView key={index + ''} widthContainer={widthContainer} uri={item.uri} index={index} />
    })
  } 
  return (
    <div className={styles.showProject}>
      <Toolbar />

      <div style={{ position: 'relative' }}>
        <div>
          {displayPdfType === PdfViewType.gridDisplay ? <div ref={refPdfContainer} className={styles.viewer}
            style={{
              display: "flex", flexWrap: "wrap", flexDirection: "row",
              overflow: "scroll", backgroundColor: "#e4e4e4", paddingLeft: 40, paddingRight: 30,
            }}> {renderListPdf()}</div> : <div className={styles.viewer}> {renderSingleView(nodeInfo, widthContainer)}</div>}
        </div>
        <div className={styles.pdfBtnContainer}>
          <Button
            onClick={onSetDisplayPdfGrid}
            type="primary"
            style={{ marginTop: 25, marginLeft: 25, padding: 0, opacity: displayPdfType === PdfViewType.singleDisplay ? 1 : 0.5 }}
            size="small"
            className={styles.btn}
          >
            <i className="icon-view-column" style={{ margin: 2 }}></i>
          </Button>
          <br />
          <Button
            onClick={onSetDisplayPdfSingle}
            type="primary"
            style={{ marginTop: 15, marginLeft: 25, padding: 0, opacity: displayPdfType === PdfViewType.singleDisplay ? 0.5 : 1 }}
            size="small"
            className={styles.btn}
          >
            <i className="icon-view-line" style={{ margin: 2 }}></i>
          </Button>
        </div>
      </div>
    </div>

  )
}
export default ShowProject;
